name: CI workflow on github-hosted runners

# concurrency:
#   group: ci-${{ github.ref }}

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
  push:
  workflow_dispatch:
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  CARGO_TARGET_DIR: ${{ github.workspace }}
  LOGBAK_USER: ${{secrets.LOGBAK_USER}}  #LOCBAK_* for upload logs to server when test failed, for windows
  LOGBAK_PASSWORD: ${{secrets.LOGBAK_PASSWORD}}
  LOGBAK_SERVER: ${{secrets.LOGBAK_SERVER}}

jobs:
  # if-workflow-is-required:
  #   name: Check If Current Workflow is Required
  #   if: |
  #     contains(github.event_name, 'repository_dispatch')
  #     || contains(github.event_name, 'pull_request')
  #     || (github.repository_owner == 'liya2017'
  #         && ! contains(github.event.head_commit.message, 'disable self-hosted ci')
  #         && ( contains('refs/heads/master,
  #                        refs/heads/develop,
  #                        refs/heads/trying,
  #                        refs/heads/staging', github.ref)
  #             || startsWith(github.ref, 'refs/heads/rc/')))
  #     || contains(github.event.head_commit.message, 'enable self-hosted ci')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Succeeded
  #       run: exit 0

  # if-simple-tests-enabled:
  #   name: Check If Simple Tests is Enabled
  #   needs: if-workflow-is-required
  #   if: |
  #     contains(github.event_name, 'repository_dispatch')
  #     || contains(github.event_name, 'pull_request')
  #     || contains('refs/heads/master,
  #                  refs/heads/trying,
  #                  refs/heads/staging', github.ref)
  #     || (github.ref == 'refs/heads/develop' && github.event.head_commit.author.name != 'bors[bot]')
  #     || contains(github.event.head_commit.message, 'enable self-hosted ci')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Succeeded
  #       run: exit 0

  UnitTest:
    # needs: if-simple-tests-enabled
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest,macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            script_run: make test
          - os:  macos-latest
            script_run: make test
          - os: windows-latest
            script_run: devtools/windows/make test
    steps:
    - uses: actions/checkout@v2
    - if: ${{ runner.os == 'Windows' }}
      id: cache-key
      shell: bash
      run: echo "::set-output name=yyyymm::$(/bin/date -u '+%Y%m')"
    - if: ${{ runner.os == 'Windows' }}
      uses: actions/cache@v2
      id: restore-scoop
      with:
        path: ~/scoop
        key: ${{ runner.os }}-scoop-${{ steps.cache-key.outputs.yyyymm }}
    - if: ${{ runner.os == 'Windows' && steps.restore-scoop.outputs.cache-hit != 'true' }}
      run: iex (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
    - if: ${{ runner.os == 'Windows' }}
      run: |
        echo "$env:USERPROFILE\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "${{ github.workspace }}\devtools\windows" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - if: ${{ runner.os == 'Windows' }}
      run: |
        scoop install git
        scoop bucket add extras
        scoop install llvm yasm
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: 1.51.0
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
              ${{ runner.os }}-cargo-${{ hashFiles('rust-toolchain') }}-
              ${{ runner.os }}-cargo-
    - uses: actions/cache@v2
      with:
        path: target/
        key: ${{ runner.os }}-build-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
             ${{ runner.os }}-build-${{ hashFiles('rust-toolchain') }}-
             ${{ runner.os }}-build-
    - uses: actions/cache@v2
      if: ${{ runner.os != 'Windows' }}
      with:
        path: target/release/ckb
        key: ${{ runner.os }}-executable-${{ github.sha }}
    - uses: actions/cache@v2
      if: ${{ runner.os == 'Windows' }}
      with:
        path: target/release/ckb.exe
        key: ${{ runner.os }}-executable-${{ github.sha }}
    - name: UnitTest
      run: ${{ matrix.script_run }}
    # - uses: doitian/available-space@v1
    #   if: ${{ always() }}
    #   with:
    #     clean-threshold: 40000
    #     clean: cargo clean --target-dir "${CARGO_TARGET_DIR}" || true

  Integration_Test:
    # needs: if-simple-tests-enabled
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest,macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            script_run: make CKB_TEST_SEC_COEFFICIENT=5 CKB_TEST_ARGS="-c 4 --no-report" integration
          - os: macos-latest
            script_run: make CKB_TEST_SEC_COEFFICIENT=5 CKB_TEST_ARGS="-c 4 --no-report" integration
          - os: windows-latest
            script_run: devtools/windows/make CKB_TEST_SEC_COEFFICIENT=5 CKB_TEST_ARGS="-c 4 --no-report" integration
            SENTRY_DSN: "https://15373165fbf2439b99ba46684dfbcb12@sentry.nervos.org/7"
    steps:
    - uses: actions/checkout@v2
    - if: ${{ runner.os == 'Windows' }}
      id: cache-key
      shell: bash
      run: echo "::set-output name=yyyymm::$(/bin/date -u '+%Y%m')"
    - if: ${{ runner.os == 'Windows' }}
      uses: actions/cache@v2
      id: restore-scoop
      with:
        path: ~/scoop
        key: ${{ runner.os }}-scoop-${{ steps.cache-key.outputs.yyyymm }}
    - if: ${{ runner.os == 'Windows' && steps.restore-scoop.outputs.cache-hit != 'true' }}
      run: iex (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
    - if: ${{ runner.os == 'Windows' }}
      run: |
        echo "$env:USERPROFILE\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "${{ github.workspace }}\devtools\windows" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - if: ${{ runner.os == 'Windows' }}
      run: |
        scoop install git
        scoop bucket add extras
        scoop install llvm yasm
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: 1.51.0
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
              ${{ runner.os }}-cargo-${{ hashFiles('rust-toolchain') }}-
              ${{ runner.os }}-cargo-
    - uses: actions/cache@v2
      with:
        path: target/
        key: ${{ runner.os }}-build-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
             ${{ runner.os }}-build-${{ hashFiles('rust-toolchain') }}-
             ${{ runner.os }}-build-
    - uses: actions/cache@v2
      if: ${{ runner.os != 'Windows' }}
      with:
        path: target/release/ckb
        key: ${{ runner.os }}-executable-${{ github.sha }}
    - uses: actions/cache@v2
      if: ${{ runner.os == 'Windows' }}
      with:
        path: target/release/ckb.exe
        key: ${{ runner.os }}-executable-${{ github.sha }}
    - name: Integration_Test
      run: ${{ matrix.script_run }}
    # - uses: doitian/available-space@v1
    #   if: ${{ always() }}
    #   with:
    #     clean-threshold: 40000
    #     clean: cargo clean --target-dir "${CARGO_TARGET_DIR}" || true
    - name: Post Run - Upload integration Result when failed
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}_integration.log
        path: ${{ env.CKB_INTEGRATION_TEST_TMP }}/integration.log
    env:
      SENTRY_DSN: ${{ matrix.SENTRY_DSN }}
      ImageOS: ${{matrix.os}}
      BUILD_BUILDID: ${{ github.run_id }}

  Benchmarks_Test:
    # needs: if-simple-tests-enabled
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest,macos-latest]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
              ${{ runner.os }}-cargo-${{ hashFiles('rust-toolchain') }}-
              ${{ runner.os }}-cargo-
    - uses: actions/cache@v2
      with:
        path: target/
        key: ${{ runner.os }}-build-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
             ${{ runner.os }}-build-${{ hashFiles('rust-toolchain') }}-
             ${{ runner.os }}-build-
    - uses: actions/cache@v2
      if: ${{ runner.os != 'Windows' }}
      with:
        path: target/release/ckb
        key: ${{ runner.os }}-executable-${{ github.sha }}
    - uses: actions/cache@v2
      if: ${{ runner.os == 'Windows' }}
      with:
        path: target/release/ckb.exe
        key: ${{ runner.os }}-executable-${{ github.sha }}
    - name: Benchmarks_Test
      run: |
        make bench-test
    # - uses: doitian/available-space@v1
    #   if: ${{ always() }}
    #   with:
    #     clean-threshold: 40000
    #     clean: cargo clean --target-dir "${CARGO_TARGET_DIR}" || true

  Linters:
    # needs: if-simple-tests-enabled
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest,macos-latest]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
              ${{ runner.os }}-cargo-${{ hashFiles('rust-toolchain') }}-
              ${{ runner.os }}-cargo-
    - uses: actions/cache@v2
      with:
        path: target/
        key: ${{ runner.os }}-build-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
        restore-keys: |
             ${{ runner.os }}-build-${{ hashFiles('rust-toolchain') }}-
             ${{ runner.os }}-build-
    - uses: actions/cache@v2
      if: ${{ runner.os != 'Windows' }}
      with:
        path: target/release/ckb
        key: ${{ runner.os }}-executable-${{ github.sha }}
    - name: Linters
      run: |
         cargo fmt --version ||  rustup component add rustfmt
         cargo clippy --version ||  rustup component add clippy
         make fmt
         make clippy
         git diff --exit-code Cargo.lock
    # - uses: doitian/available-space@v1
    #   if: ${{ always() }}
    #   with:
    #     clean-threshold: 40000
    #     clean: cargo clean --target-dir "${CARGO_TARGET_DIR}" || true

  Quick_Check:
    # needs: if-simple-tests-enabled
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Quick_Check
      run: |
        make check-cargotoml
        make check-whitespaces
        make check-dirty-rpc-doc
        make check-dirty-hashes-toml
        devtools/ci/check-cyclic-dependencies.py
    # - uses: doitian/available-space@v1
    #   if: ${{ always() }}
    #   with:
    #     clean-threshold: 40000
    #     clean: cargo clean --target-dir "${CARGO_TARGET_DIR}" || true

  WASM_build:
    # needs: if-simple-tests-enabled
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: WASM build
      run: |
        rustup target add wasm32-unknown-unknown
        make wasm-build-test
    # - uses: doitian/available-space@v1
    #   if: ${{ always() }}
    #   with:
    #     clean-threshold: 40000
    #     clean: cargo clean --target-dir "${CARGO_TARGET_DIR}" || true

  Security_Audit_Licenses:
    # needs: if-simple-tests-enabled
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Security Audit & Licenses
      run: |
        cargo deny --version || cargo install cargo-deny --locked
        make security-audit
        make check-crates
        make check-licenses
    # - uses: doitian/available-space@v1
    #   if: ${{ always() }}
    #   with:
    #     clean-threshold: 40000
    #     clean: cargo clean --target-dir "${CARGO_TARGET_DIR}" || true

  ci-success:
    name: ci
    needs:
      - UnitTest
      - Linters
      - Quick_Check
      - Security_Audit_Licenses
      - WASM_build
      - Benchmarks_Test
      - Integration_Test
    if: |
        (contains(github.event_name, 'pull_request') || contains('bors[bot]', github.actor)) && success()
    runs-on: ubuntu-latest
    steps:
      - name: CI succeeded
        run: exit 0
