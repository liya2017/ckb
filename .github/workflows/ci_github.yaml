name: CI workflow on github-hosted runners

# concurrency:
#   group: ci-${{ github.ref }}

on:
  workflow_dispatch:
env:
  LOGBAK_USER: ${{secrets.LOGBAK_USER}}  #LOCBAK_* for upload logs to server when test failed, for windows
  LOGBAK_PASSWORD: ${{secrets.LOGBAK_PASSWORD}}
  LOGBAK_SERVER: ${{secrets.LOGBAK_SERVER}}
  RUSTFLAGS: "-D warnings"
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  UnitTest:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest,macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            script_run: make test
          - os:  macos-latest
            script_run: make test
          - os: windows-latest
            script_run: devtools/windows/make test
    steps:
    - uses: actions/checkout@v2
    # - if: ${{ runner.os == 'Windows' }}
    #   id: cache-key
    #   shell: bash
    #   run: echo "::set-output name=yyyymm::$(/bin/date -u '+%Y%m')"
    # - if: ${{ runner.os == 'Windows' }}
    #   uses: actions/cache@v2
    #   id: restore-scoop
    #   with:
    #     path: ~/scoop
    #     key: ${{ runner.os }}-scoop-${{ steps.cache-key.outputs.yyyymm }}
    - if: ${{ runner.os == 'Windows' && steps.restore-scoop.outputs.cache-hit != 'true' }}
      run: iex (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
    - if: ${{ runner.os == 'Windows' }}
      run: |
        echo "$env:USERPROFILE\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "${{ github.workspace }}\devtools\windows" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - if: ${{ runner.os == 'Windows' }}
      run: |
        scoop install git
        scoop bucket add extras
        scoop install llvm yasm
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: 1.51.0
    # - if: ${{ runner.os != 'Windows' }}
    #   uses: actions/cache@v2
    #   with:
    #     path: target/debug
    #     key: ${{ runner.os }}-target-debug-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
    - name: UnitTest
      run: ${{ matrix.script_run }}

  Integration_Test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest,macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            script_run: make CKB_TEST_SEC_COEFFICIENT=5 CKB_TEST_ARGS="-c 4 --no-report" integration
          - os: macos-latest
            script_run: make CKB_TEST_SEC_COEFFICIENT=5 CKB_TEST_ARGS="-c 4 --no-report" integration
          - os: windows-latest
            script_run: devtools/windows/make CKB_TEST_SEC_COEFFICIENT=5 CKB_TEST_ARGS="-c 4 --no-report" integration
            SENTRY_DSN: "https://15373165fbf2439b99ba46684dfbcb12@sentry.nervos.org/7"
    steps:
    - uses: actions/checkout@v2
    # - if: ${{ runner.os == 'Windows' }}
    #   id: cache-key
    #   shell: bash
    #   run: echo "::set-output name=yyyymm::$(/bin/date -u '+%Y%m')"
    # - if: ${{ runner.os == 'Windows' }}
    #   uses: actions/cache@v2
    #   id: restore-scoop
    #   with:
    #     path: ~/scoop
    #     key: ${{ runner.os }}-scoop-${{ steps.cache-key.outputs.yyyymm }}
    - if: ${{ runner.os == 'Windows' && steps.restore-scoop.outputs.cache-hit != 'true' }}
      run: iex (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
    - if: ${{ runner.os == 'Windows' }}
      run: |
        echo "$env:USERPROFILE\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "${{ github.workspace }}\devtools\windows" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - if: ${{ runner.os == 'Windows' }}
      run: |
        scoop install git
        scoop bucket add extras
        scoop install llvm yasm
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: 1.51.0
    # - if: ${{ runner.os != 'Windows' }}
    #   uses: actions/cache@v2
    #   with:
    #     path: target/debug
    #     key: ${{ runner.os }}-target-debug-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
    # - if: ${{ runner.os != 'Windows' }}
    #   uses: actions/cache@v2
    #   with:
    #     path: target/release
    #     key: ${{ runner.os }}-target-release-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
    - name: Integration_Test
      run: ${{ matrix.script_run }}
    - name: Post Run - Upload integration Result when failed
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}_integration.log
        path: ${{ env.CKB_INTEGRATION_TEST_TMP }}/integration.log
    env:
      SENTRY_DSN: ${{ matrix.SENTRY_DSN }}
      ImageOS: ${{matrix.os}}
      BUILD_BUILDID: ${{ github.run_id }}

  Benchmarks_Test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest,macos-latest]
    steps:
    - uses: actions/checkout@v2
    # - uses: actions/cache@v2
    #   with:
    #     path: target/debug
    #     key: ${{ runner.os }}-target-debug-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
    - name: Benchmarks_Test
      run: |
        make bench-test

  Linters:
    # needs: if-simple-tests-enabled
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest,macos-latest]
    steps:
    - uses: actions/checkout@v2
    # - uses: actions/cache@v2
    #   with:
    #     path: target/debug
    #     key: ${{ runner.os }}-target-debug-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
    - name: Linters
      run: |
         cargo fmt --version ||  rustup component add rustfmt
         cargo clippy --version ||  rustup component add clippy
         make fmt
         make clippy
         git diff --exit-code Cargo.lock

  Quick_Check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    # - uses: actions/cache@v2
    #   with:
    #     path: target/debug
    #     key: ${{ runner.os }}-target-debug-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
    - name: Quick_Check
      run: |
        make check-cargotoml
        make check-whitespaces
        make check-dirty-rpc-doc
        make check-dirty-hashes-toml
        devtools/ci/check-cyclic-dependencies.py

  WASM_build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    # - uses: actions/cache@v2
    #   with:
    #     path: target/debug
    #     key: ${{ runner.os }}-target-debug-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
    - name: WASM build
      run: |
        rustup target add wasm32-unknown-unknown
        make wasm-build-test

  Security_Audit_Licenses:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    # - uses: actions/cache@v2
    #   with:
    #     path: target/debug
    #     key: ${{ runner.os }}-target-debug-${{ hashFiles('rust-toolchain') }}-${{ hashFiles('Cargo.lock') }}
    - name: Security Audit & Licenses
      run: |
        cargo deny --version || cargo install cargo-deny --locked
        make security-audit
        make check-crates
        make check-licenses

  ci-success:
    name: ci
    needs:
      - UnitTest
      - Linters
      - Quick_Check
      - Security_Audit_Licenses
      - WASM_build
      - Benchmarks_Test
      - Integration_Test
    if: |
        (contains(github.event_name, 'pull_request') || contains('bors[bot]', github.actor)) && success()
    runs-on: ubuntu-latest
    steps:
      - name: CI succeeded
        run: exit 0