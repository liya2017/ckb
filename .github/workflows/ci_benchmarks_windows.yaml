name: ci_benchmarks_windows
concurrency:
  group: ci_benchmarks_windows-${{ github.ref }}
  cancel-in-progress: true
on:
  pull_request:
    types: [ opened, synchronize, reopened ]
  push:
    branches:
      - master
      - develop
      - trying
      - staging
      - 'rc/*'
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUSTFLAGS: -D warnings
jobs:
  prologue:
    name: prologue
    if: |
       github.event_name != 'push' ||
       ( github.event_name == 'push' &&
        ( github.ref == 'refs/heads/master' ||
          github.ref == 'refs/heads/trying' ||
          github.ref == 'refs/heads/staging' ||
          (github.ref == 'refs/heads/develop' && github.event.head_commit.author.name != 'bors[bot]') ||
          startsWith(github.ref, 'refs/heads/rc/')
        )
       ) || (github.repository_owner != 'nervosnetwork')
    runs-on: ubuntu-20.04
    outputs:
      os_skip: ${{ steps.prologue.outputs.os_skip }}
      job_skip: ${{ steps.prologue.outputs.job_skip }}
      windows_runner_label: ${{ steps.prologue.outputs.windows_runner_label }}
    steps:
    - uses: actions/checkout@v3
    - name: prologue
      id: prologue
      uses: ./.github/actions/ci_prologue
      with:
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        COMMIT_MESSAGE: "${{github.event.head_commit.message}}"
        PR_COMMONS_BODY: "${{ github.event.pull_request.body }}"
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        LABELS: "${{ toJson(github.event.pull_request.labels.*.name) }}"
        GITHUB_REPOSITORY: ${{ github.repositoty }}
        GITHUB_WORKFLOW: ${{ github.workflow }}
  ci_benchmarks_windows:
    name: ci_benchmarks_windows
    needs: prologue
    runs-on: ${{ needs.prologue.outputs.windows_runner_label }}
    steps:
    - uses: actions/checkout@v3
    - name: install required tools
      if: ${{ needs.prologue.outputs.windows_runner_label == 'windows-2019' }}
      run: |
        iwr -useb get.scoop.sh -outfile 'install-scoop.ps1'
        .\install-scoop.ps1 -RunAsAdmin
        echo "$env:USERPROFILE\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "${{ github.workspace }}\devtools\windows" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        scoop install git
        scoop bucket add extras
        scoop install llvm yasm
        $pgService = Get-Service -Name postgresql*
        Set-Service -InputObject $pgService -Status running -StartupType automatic
        Start-Process -FilePath "$env:PGBIN\pg_isready" -Wait -PassThru
    - run: |
        echo "START_TIME=$(date +%Y-%m-%d' '%H:%M:%S.%6N)" >> $GITHUB_ENV
        echo "CKB_COMMIT_ID=$(git describe --dirty --always --match _EXCLUDE__ --abbrev=7)" >> $GITHUB_ENV
        echo "CKB_COMMIT_TIME=$(git log -1 --date=iso "--pretty=format:%cd" | cut -d ' ' -f 1,2)" >> $GITHUB_ENV
        if [[ ${{ needs.prologue.outputs.os_skip }} == run ]] && [[ ${{ needs.prologue.outputs.job_skip }} == run ]];then
            devtools/ci/ci_main.sh
        else
          echo "skip job"
          exit 0
        fi
      shell: bash
    - name: Set test state when success
      if: ${{ success() }}
      run: |
         echo "GITHUB_RUN_STATE=0" >> $GITHUB_ENV
      shell: bash
    - name: Set test state when test failed.
      if: ${{ failure() }}
      run: |
         echo "GITHUB_RUN_STATE=1" >> $GITHUB_ENV
      shell: bash
    - name: insert data to DB
      if: ${{ always() && github.repository_owner == 'nervosnetwork'}}
      run: |
        if [[ ! -z "${{ env.PGHOST }}" ]];then
          end_time=$(date +%Y-%m-%d' '%H:%M:%S.%6N)
          sql="INSERT INTO ci (github_run_name,github_run_id,github_run_state,start_time,end_time,github_branch,github_trigger_event,github_repo_owner,github_pr_number,github_commit_id,github_commit_time,github_action_run_os,github_run_link)  \
             VALUES ('$GITHUB_WORKFLOW','$GITHUB_RUN_ID','${{ env.GITHUB_RUN_STATE }}','${{ env.START_TIME }}','$end_time','${{ github.ref_name }}','${{github.event_name }}','${{ github.repository_owner }}','${{github.event.number}}','${{ env.CKB_COMMIT_ID }}','${{ env.CKB_COMMIT_TIME}}','windows','https://github.com/${{ github.repository }}actions/runs/${{ github.run_id }}');"
          echo $RUNNER_LABEL
          if [[ $RUNNER_LABEL == 'windows-2019' ]];then
             echo "github action"
             "$PGBIN\psql" -c "$sql"
          else
             psql -c "$sql"
          fi
        fi
      shell: bash
      env:
          PGHOST: ${{ secrets.PGHOST }}
          PGPORT: ${{ secrets.PGPORT }}
          PGUSER: ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGDATABASE: ckbtest
    env:
      RUNNER_LABEL: ${{ needs.prologue.outputs.windows_runner_label }}
