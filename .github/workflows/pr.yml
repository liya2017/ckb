
name: Package

on:
  push:
    branches:
      - 'pkg/*'
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  CKB_CLI_VERSION: v0.40.0
  QINIU_SECRET_KEY: "${{ secrets.QINIU_SECRET_KEY }}"
  encrypted_82dff4145bbf_iv: "${{ secrets.encrypted_82dff4145bbf_iv }}"
  encrypted_82dff4145bbf_key: "${{ secrets.encrypted_82dff4145bbf_key }}"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow
      - name: Set tag
        run: |
          export GIT_TAG_NAME=` echo ${{ github.ref }} | awk -F '/' '{print $4}' `
          echo "GIT_TAG_NAME=$GIT_TAG_NAME" >> $GITHUB_ENV
      - name: "Build Changelog"
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@main
        with:
          configuration: "configs/configuration_repo.json"
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.GIT_TAG_NAME}}
          release_name: ${{ env.GIT_TAG_NAME}}
          body: ${{steps.build_changelog.outputs.changelog}}
          draft: true
          prerelease: true
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  package-for-linux:
    name: package-for-linux
    runs-on: [self-hosted, Linux, X64,package-for-linux]
    needs: create_release
    steps:
    - uses: actions/checkout@v2
    - name: Set Env
      run: |
        export GIT_TAG_NAME=` echo ${{ github.ref }} | awk -F '/' '{print $4}' `
        echo "GIT_TAG_NAME=$GIT_TAG_NAME" >> $GITHUB_ENV
    - name: Build CKB and Package CKB
      run: |
        export GIT_TAG_NAME=` echo ${{ github.ref }} | awk -F '/' '{print $4}' `
        docker run --rm -i -w /ckb -v $(pwd):/ckb -v $HOME/.cargo:/root/.cargo -e OPENSSL_STATIC=1 -e OPENSSL_LIB_DIR=/usr/local/lib -e OPENSSL_INCLUDE_DIR=/usr/local/include/openssl $BUILDER_IMAGE make prod
        #  docker run --rm -i -w /ckb -v $(pwd):/ckb -v $HOME/.cargo:/root/.cargo -e OPENSSL_STATIC=1 -e OPENSSL_LIB_DIR=/usr/local/lib -e OPENSSL_INCLUDE_DIR=/usr/local/include/openssl $BUILDER_IMAGE make prod
        # Will reeturn the input device is not a TTY if docker run with -it. Follow this comments to solve it https://github.com/actions/runner/issues/241#issuecomment-556626706
        sudo chmod 777 -R ${{ github.workspace }} $whoami  #Since the tartget build by docker usre, so chamod the target folder to remove the workspace succeed on next workflow 
        # openssl aes-256-cbc -K ${encrypted_82dff4145bbf_key} -iv ${encrypted_82dff4145bbf_iv} -in devtools/ci/travis-secret.asc.enc -out devtools/ci/travis-secret.asc -d
        # gpg --import devtools/ci/travis-secret.asc
        devtools/ci/package.sh target/release/ckb
        # cp ${{ github.workspace }}/../ckb_v0.35.2_x86_64-unknown-linux-gnu.tar.gz.asc "releases/$PKG_NAME"
        mv ${{ github.workspace }}/releases/ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }} ${{ github.workspace }}
        # mv ${{ github.workspace }}/releases/ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}.asc ${{ github.workspace }}
        if [ -n "${QINIU_SECRET_KEY:-}" ]; then devtools/ci/qput-7z "releases/ckb_${GIT_TAG_NAME}_x86_64-unknown-linux-gnu"; fi
    - name: upload-zip-file 
      uses: actions/upload-artifact@v2
      with:
        name: ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}
        path: ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}
    # - name: upload-asc-file 
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}.asc
    #     path: ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}.asc
    env:
      BUILDER_IMAGE: nervos/ckb-docker-builder:xenial-rust-1.46.0
      REL_PKG: x86_64-unknown-linux-gnu.tar.gz


  package-for-Centos:
    name: package-for-Centos
    runs-on: [self-hosted, Linux, X64,package-for-Centos]
    needs: create_release
    steps:
    - uses: actions/checkout@v2
    - name: Set Env
      run: |
        export GIT_TAG_NAME=` echo ${{ github.ref }} | awk -F '/' '{print $4}' `
        echo "GIT_TAG_NAME=$GIT_TAG_NAME" >> $GITHUB_ENV
        echo "REL_PKG=x86_64-unknown-centos-gnu.tar.gz" >> $GITHUB_ENV
    - name: Build CKB and Package CKB
      run: |
        mkdir -p $HOME/.cargo
        export GIT_TAG_NAME=` echo ${{ github.ref }} | awk -F '/' '{print $4}' `
        docker run --rm -i -w /ckb -v $(pwd):/ckb -v $HOME/.cargo:/root/.cargo $BUILDER_IMAGE scl enable llvm-toolset-7 'make prod'
        sudo chmod 777 -R ${{ github.workspace }}
        # openssl aes-256-cbc -K $encrypted_82dff4145bbf_key -iv $encrypted_82dff4145bbf_iv -in devtools/ci/travis-secret.asc.enc -out devtools/ci/travis-secret.asc -d
        # gpg --import devtools/ci/travis-secret.asc
        devtools/ci/package.sh target/release/ckb
        # cp ${{ github.workspace }}/../ckb_v0.35.2_x86_64-unknown-centos-gnu.tar.gz.asc "releases/$PKG_NAME"
        mv ${{ github.workspace }}/releases/ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }} ${{ github.workspace }}
        # mv ${{ github.workspace }}/releases/ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}.asc ${{ github.workspace }}
    - name: upload-zip-file 
      uses: actions/upload-artifact@v2
      with:
        name: ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}
        path: ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}
    # - name: upload-asc-file 
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}.asc
    #     path: ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}.asc
    env:
      BUILDER_IMAGE: nervos/ckb-docker-builder:centos-7-rust-1.41.0

  package-for-mac:
    name: package-for-mac
    runs-on: [self-hosted, macOS, X64]
    needs: create_release
    outputs:
      upload_url: ${{ needs.create_release.outputs.upload_url }}
    steps:
    - name: Set Env
      run: |
        export GIT_TAG_NAME=` echo ${{ github.ref }} | awk -F '/' '{print $4}' `
        echo "GIT_TAG_NAME=$GIT_TAG_NAME" >> $GITHUB_ENV
    - uses: actions/checkout@v2
    - name: Build CKB and Package CKB
      run: |
        export GIT_TAG_NAME=` echo ${{ github.ref }} | awk -F '/' '{print $4}' `
        make OPENSSL_STATIC=1 OPENSSL_LIB_DIR=/usr/local/opt/openssl@1.1/lib OPENSSL_INCLUDE_DIR=/usr/local/opt/openssl@1.1/include prod
        # openssl aes-256-cbc -K ${encrypted_82dff4145bbf_key} -iv $encrypted_82dff4145bbf_iv -in devtools/ci/travis-secret.asc.enc -out devtools/ci/travis-secret.asc -d
        # gpg --import devtools/ci/travis-secret.asc
        devtools/ci/package.sh target/release/ckb
        # cp ${{ github.workspace }}/../ckb_v0.35.2_x86_64-apple-darwin.zip.asc "releases/$PKG_NAME"
        mv ${{ github.workspace }}/releases/ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }} ${{ github.workspace }}
        # mv ${{ github.workspace }}/releases/ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}.asc ${{ github.workspace }}
        ls -al ${{ github.workspace }}
    - name: upload-zip-file 
      uses: actions/upload-artifact@v2
      with:
        name: ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}
        path: ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}
    - name: upload-asc-file 
      uses: actions/upload-artifact@v2
      with:
        name: ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}.asc
        path: ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}.asc
    env:
      REL_PKG: x86_64-apple-darwin.zip

  # package-for-windows:
  #   name: package-for-windows
  #   runs-on: [self-hosted, Windows, X64,win-runner]
  #   needs: create_release
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Set Env
  #     run: |
  #      echo ("GIT_TAG_NAME=" + $env:GITHUB_REF.replace('refs/heads/pkg/', '')) >> $env:GITHUB_ENV
  #   - name: Build
  #     run: |
  #       devtools/windows/make prod
  #   - name: Download ckb-cli
  #     run: curl -LO https://github.com/nervosnetwork/ckb-cli/releases/download/$($env:CKB_CLI_VERSION)/ckb-cli_$($env:CKB_CLI_VERSION)_x86_64-pc-windows-msvc.zip
  #   - name: Prepare archive
  #     run: |
  #       $env:GIT_TAG_NAME=($env:GITHUB_REF -split '/')[3]
  #       mkdir releases
  #       mkdir releases/ckb_$($env:GIT_TAG_NAME)_x86_64-pc-windows-msvc
  #       cp -r target/release/ckb.exe,README.md,CHANGELOG.md,COPYING,docs releases/ckb_$($env:GIT_TAG_NAME)_x86_64-pc-windows-msvc
  #       cp devtools/windows/ckb-init-mainnet.bat,devtools/windows/ckb-reinit-mainnet.bat,devtools/windows/ckb-run.bat releases/ckb_${$env:GIT_TAG_NAME}_x86_64-pc-windows-msvc
  #       cp rpc/README.md releases/ckb_$( $env:GIT_TAG_NAME)_x86_64-pc-windows-msvc/docs/rpc.md
  #       expand-archive -path ckb-cli_$($env:CKB_CLI_VERSION)_x86_64-pc-windows-msvc.zip -DestinationPath ${{ github.workspace }}
  #       mv ckb-cli_$($env:CKB_CLI_VERSION)_x86_64-pc-windows-msvc/ckb-cli.exe releases/ckb_$( $env:GIT_TAG_NAME)_x86_64-pc-windows-msvc/
  #       cp ${{ github.workspace }}/../ckb_v0.35.2_x86_64-pc-windows-msvc.zip.asc releases
  #   - name: Archive Files
  #     run: |
  #       $env:GIT_TAG_NAME=($env:GITHUB_REF -split '/')[3]
  #       Compress-Archive -Path releases/ckb_$( $env:GIT_TAG_NAME)_x86_64-pc-windows-msvc -DestinationPath releases/ckb_$($env:GIT_TAG_NAME)_$($env:REL_PKG)
  #   - name: Install GPG4Win
  #     run: |
  #       scoop bucket add extras
  #       scoop install gpg4win
  #       scoop install openssl
  #   - name: Sign Archive
  #     run: |
  #       # openssl aes-256-cbc -K ${encrypted_82dff4145bbf_key} -iv $encrypted_82dff4145bbf_iv -in devtools/ci/travis-secret.asc.enc -out devtools/ci/travis-secret.asc -d
  #       # gpg --import devtools/ci/travis-secret.asc
  #       $env:GIT_TAG_NAME=($env:GITHUB_REF -split '/')[3]
  #       # gpg -u "Nervos Azure Builder <bot@nervos.org>" -ab "$($env:github.workspace)/releases/ckb_$($env:GIT_TAG_NAME)_$($env:REL_PKG)"
  #       mv ${{ github.workspace }}/releases/ckb_$($env:GIT_TAG_NAME)_$($env:REL_PKG) ${{ github.workspace }}
  #       mv ${{ github.workspace }}/releases/ckb_$($env:GIT_TAG_NAME)_$($env:REL_PKG).asc ${{ github.workspace }}
  #   - name: upload-artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}
  #       path: ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}
  #   - name: upload-artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}.asc
  #       path: ckb_${{env.GIT_TAG_NAME }}_${{env.REL_PKG }}.asc
  #   env:
  #     REL_PKG: x86_64-pc-windows-msvc.zip

  Upload_File:
    name: Upload_Zip_File
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [Linux-runner,centos-runner, mac-runner,win-runner]
        os: [package-for-Centos, macOS,package-for-linux]
        include:
          - os: package-for-linux
            REL_PKG: x86_64-unknown-linux-gnu.tar.gz
            SET_ENV: export GIT_TAG_NAME=` echo ${{ github.ref }} | awk -F '/' '{print $4}' ` && echo "GIT_TAG_NAME=$GIT_TAG_NAME" >> $GITHUB_ENV
          - os: package-for-Centos
            REL_PKG: x86_64-unknown-centos-gnu.tar.gz
            SET_ENV: export GIT_TAG_NAME=` echo ${{ github.ref }} | awk -F '/' '{print $4}' ` && echo "GIT_TAG_NAME=$GIT_TAG_NAME" >> $GITHUB_ENV
          - os: macOS
            REL_PKG: x86_64-apple-darwin.zip
            SET_ENV: export GIT_TAG_NAME=` echo ${{ github.ref }} | awk -F '/' '{print $4}' ` && echo "GIT_TAG_NAME=$GIT_TAG_NAME" >> $GITHUB_ENV
          # - os: win-runner
          #   REL_PKG: x86_64-pc-windows-msvc.zip
          #   SET_ENV: echo ("GIT_TAG_NAME=" + $env:GITHUB_REF.replace('refs/heads/pkg/', '')) >> $env:GITHUB_ENV
    needs:
      - package-for-linux
      - package-for-mac
      # - package-for-windows
      - package-for-Centos
    steps:
    - uses: actions/checkout@v2
    - name: Set tag
      run: ${{ matrix.SET_ENV }}
    - name: Prepare - Download tar
      uses: actions/download-artifact@v2
      with:
        name: ckb_${{env.GIT_TAG_NAME}}_${{ matrix.REL_PKG }}
    # - name: Prepare - Download asc
    #   uses: actions/download-artifact@v2
    #   with:
    #     name: ckb_${{env.GIT_TAG_NAME}}_${{ matrix.REL_PKG }}.asc
    - name: Upload tar assets 
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ needs.package-for-mac.outputs.upload_url }}
        asset_name: ckb_${{env.GIT_TAG_NAME}}_${{ matrix.REL_PKG }}
        asset_path: ${{ github.workspace }}/ckb_${{env.GIT_TAG_NAME }}_${{ matrix.REL_PKG }}
        asset_content_type: application/octet-stream
    # - name: Upload asc assets 
    #   uses: actions/upload-release-asset@v1
    #   with:
    #     upload_url: ${{ needs.package-for-mac.outputs.upload_url }}
    #     asset_name: ckb_${{env.GIT_TAG_NAME}}_${{ matrix.REL_PKG }}.asc
    #     asset_path: ${{ github.workspace }}/ckb_${{env.GIT_TAG_NAME }}_${{ matrix.REL_PKG }}.asc
    #     asset_content_type: application/octet-stream
        

  # Upload_ASC_File:
  #   name: Upload_ASC_File
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [Linux-runner,centos-runner, mac-runner,win-runner]
  #       include:
  #         - os: Linux-runner
  #           REL_PKG: x86_64-unknown-linux-gnu.tar.gz
  #           SET_ENV: export GIT_TAG_NAME=` echo ${{ github.ref }} | awk -F '/' '{print $4}' ` && echo "GIT_TAG_NAME=$GIT_TAG_NAME" >> $GITHUB_ENV
  #         - os: centos-runner
  #           REL_PKG: x86_64-unknown-centos-gnu.tar.gz
  #           SET_ENV: export GIT_TAG_NAME=` echo ${{ github.ref }} | awk -F '/' '{print $4}' ` && echo "GIT_TAG_NAME=$GIT_TAG_NAME" >> $GITHUB_ENV
  #         - os: mac-runner
  #           REL_PKG: x86_64-apple-darwin.zip
  #           SET_ENV: export GIT_TAG_NAME=` echo ${{ github.ref }} | awk -F '/' '{print $4}' ` && echo "GIT_TAG_NAME=$GIT_TAG_NAME" >> $GITHUB_ENV
  #         - os: win-runner
  #           REL_PKG: x86_64-pc-windows-msvc.zip
  #           SET_ENV: echo ("GIT_TAG_NAME=" + $env:GITHUB_REF.replace('refs/heads/', '')) >> $env:GITHUB_ENV
  #   needs:
  #     # - package-for-linux
  #     - package-for-mac
  #     # - package-for-windows
  #     # - package-for-Centos
  #   steps:
  #   - name: Set tag
  #     run: ${{ matrix.SET_ENV }}
  #   - name: Prepare - Download tar
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: ckb_${{env.GIT_TAG_NAME}}_${{ matrix.REL_PKG }}.asc
  #   - run: |
  #        $(pwd)
  #        ls
  #   - name: Upload release assets 
  #     uses: actions/upload-release-asset@v1
  #     with:
  #       upload_url: ${{ needs.create_release.outputs.upload_url }}
  #       asset_name: ckb_${{env.GIT_TAG_NAME}}_${{ matrix.REL_PKG }}.asc
  #       asset_path: ${{ github.workspace }}/releases/ckb_${{env.GIT_TAG_NAME}}_${{ matrix.REL_PKG }}.asc
  #       asset_content_type: application/octet-stream
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}