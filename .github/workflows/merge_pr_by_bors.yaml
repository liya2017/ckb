name: PR verify before merge by bors

on:
  push:
    branches:
      - develop
      - staging
      - staging2
      - master
      - trying

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  CARGO_TARGET_DIR: ${{ github.workspace }}/../target
  LOGBAK_USER: ${{secrets.LOGBAK_USER}}  #LOCBAK_* for upload logs to server when test failed, for windows
  LOGBAK_PASSWORD: ${{secrets.LOGBAK_PASSWORD}}
  LOGBAK_SERVER: ${{secrets.LOGBAK_SERVER}}
jobs:
  UnitTest:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [Linux-runner, mac-runner,win-runner]
        include:
          - os: Linux-runner
            script_run: make test
          - os:  mac-runner
            script_run: make test
          - os: win-runner
            script_run: devtools/windows/make test
            CI: true
            ImageOS: 'windows-2019'
            BUILD_BUILDID: ${{ github.sha }}
    steps:
    - uses: actions/checkout@v2
    - name: UnitTest
      run: ${{ matrix.script_run }}
    env:
      CI: ${{ matrix.CI }}
      SENTRY_DSN: ${{ matrix.SENTRY_DSN }}
      ImageOS:  ${{ matrix.ImageOS }}

  Linters:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [Linux-runner, mac-runner]
    needs: UnitTest
    steps:
    - uses: actions/checkout@v2
    - name: Linters
      run: |
         cargo fmt --version ||  rustup component add rustfmt
         cargo clippy --version ||  rustup component add clippy
         make fmt
         make clippy
         git diff --exit-code Cargo.lock
  Latest_Linters:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [Linux-runner, mac-runner]
        include:
          - os: Linux-runner
            script_run: rustup component add rustfmt --toolchain stable-x86_64-unknown-linux-gnu &&  rustup component add clippy --toolchain stable-x86_64-unknown-linux-gnu
          - os:  mac-runner
            script_run: rustup component add rustfmt-preview && rustup component add clippy-preview
    needs: Linters
    continue-on-error: true
    steps:
    - uses: actions/checkout@v2
    - name: Pre install
      run: ${{ matrix.script_run }}
    - name: Latest_Linters
      run: |
        mv rust-toolchain rust-toolchain.bak
        echo "stable" > rust-toolchain
        make fmt
        make clippy
        mv rust-toolchain.bak rust-toolchain
  Quick_Check:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [Linux-runner, mac-runner]
    needs: Latest_Linters
    steps:
    - uses: actions/checkout@v2
    - name: Quick_Check
      run: |
        make check-cargotoml
        make check-whitespaces
        make check-dirty-rpc-doc
        make check-dirty-hashes-toml
        devtools/ci/check-cyclic-dependencies.py
  Cyclic_dev_dependencies:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [Linux-runner, mac-runner]
    needs: Quick_Check
    continue-on-error: true
    steps:
    - uses: actions/checkout@v2
    - name: Cyclic_dev_dependencies
      run: |
        devtools/ci/check-cyclic-dependencies.py --dev
  Security_Audit_Licenses:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [Linux-runner, mac-runner]
    needs: Cyclic_dev_dependencies
    continue-on-error: true
    steps:
    - uses: actions/checkout@v2
    - name: Security Audit & Licenses
      run: |
        cargo deny --version || cargo install cargo-deny --locked
        make security-audit
        make check-crates
        make check-licenses
  WASM_build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [Linux-runner, mac-runner]
    needs: Security_Audit_Licenses
    steps:
    - uses: actions/checkout@v2
    - name: WASM build
      run: |
        export PATH=/usr/lib/llvm-8/bin:$PATH
        rustup target add wasm32-unknown-unknown
        make wasm-build-test
  Benchmarks_Test:
    if: |
      contains(github.event.push.branch, ["staging", "trying","staging2" ] &&
      contains(fromJson('[ "bors" ]'), github.actor)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [Linux-runner, mac-runner]
    needs: WASM_build
    steps:
    - uses: actions/checkout@v2
    - name: Benchmarks_Test
      run: |
        make bench-test
  Integration_Test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [Linux-runner, mac-runner,win-runner]
        include:
          - os: Linux-runner
            script_run: make integration
          - os:  mac-runner
            script_run: make integration
          - os: win-runner
            script_run: devtools/windows/make CKB_TEST_SEC_COEFFICIENT=5 CKB_TEST_ARGS="-c 4 --no-report" integration
            CI: true
            SENTRY_DSN: "https://15373165fbf2439b99ba46684dfbcb12@sentry.nervos.org/7"
    needs: Benchmarks_Test
    steps:
    - uses: actions/checkout@v2
    - name: Integration_Test
      run: ${{ matrix.script_run }}
    env:
      CI: ${{ matrix.CI }}
      SENTRY_DSN: ${{ matrix.SENTRY_DSN }}
  ci-success:
    name: ci
    if: ${{ success() }}
    needs:
      - Test
      - Linters
      - Quick_Check
      - Security_Audit_Licenses
      - WASM_build
      - Benchmarks_Test
      - Integration_Test
    runs-on: ubuntu-latest
    steps:
      - name: CI succeeded
        run: exit 0