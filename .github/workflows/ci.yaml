name: CI workflow

concurrency:
  group: ci-${{ github.ref }}

on:
  # pull_request:
  #   types: [ opened, synchronize, reopened ]
  # push:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  # CARGO_TARGET_DIR: ${{ github.workspace }}/../target
  LOGBAK_USER: ${{secrets.LOGBAK_USER}}  #LOCBAK_* for upload logs to server when test failed, for windows
  LOGBAK_PASSWORD: ${{secrets.LOGBAK_PASSWORD}}
  LOGBAK_SERVER: ${{secrets.LOGBAK_SERVER}}

jobs:
  if-workflow-is-required:
    name: Check If Current Workflow is Required
    if: |
      contains(github.event_name, 'pull_request')
      || (github.repository_owner == 'nervosnetwork'
          && ! contains(github.event.head_commit.message, 'disable self-hosted ci')
          && ( contains('refs/heads/master,
                         refs/heads/develop,
                         refs/heads/trying,
                         refs/heads/staging', github.ref)
              || startsWith(github.ref, 'refs/heads/rc/')))
      || contains(github.event.head_commit.message, 'enable self-hosted ci')
      || contains(github.event_name, 'workflow_dispatch')
    runs-on: ubuntu-latest
    steps:
      - name: Succeeded
        run: exit 0

  if-simple-tests-enabled:
    name: Check If Simple Tests is Enabled
    needs: if-workflow-is-required
    if: |
      contains(github.event_name, 'pull_request')
      || contains('refs/heads/master,
                   refs/heads/trying,
                   refs/heads/staging', github.ref)
      || (github.ref == 'refs/heads/develop' && github.event.head_commit.author.name != 'bors[bot]')
      || contains(github.event.head_commit.message, 'enable self-hosted ci')
      || contains(github.event_name, 'workflow_dispatch')
    runs-on: ubuntu-latest
    steps:
      - name: Succeeded
        run: exit 0

  UnitTest:
    needs: if-simple-tests-enabled
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [Linux, macOS, Windows]
        include:
          - os: Linux
            script_run: make test
          - os:  macOS
            script_run: make test
          - os: Windows
            script_run: devtools/windows/make test
    steps:
    - uses: actions/checkout@v2
    - name: UnitTest
      run: ${{ matrix.script_run }}
    - uses: doitian/available-space@v1
      if: ${{ always() }}
      with:
        clean-threshold: 5000
        clean: cargo clean --target-dir "${CARGO_TARGET_DIR}" || true

  Integration_Test:
    needs: if-simple-tests-enabled
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [Linux, macOS, Windows]
        include:
          - os: Linux
            script_run: make CKB_TEST_SEC_COEFFICIENT=5 CKB_TEST_ARGS="-c 4 --no-report" integration
          - os: macOS
            script_run: make CKB_TEST_SEC_COEFFICIENT=5 CKB_TEST_ARGS="-c 4 --no-report" integration
          - os: Windows
            script_run: devtools/windows/make CKB_TEST_SEC_COEFFICIENT=5 CKB_TEST_ARGS="-c 4 --no-report" integration
            SENTRY_DSN: "https://15373165fbf2439b99ba46684dfbcb12@sentry.nervos.org/7"
    steps:
    - uses: actions/checkout@v2
    - name: Integration_Test
      run: ${{ matrix.script_run }}
    - uses: doitian/available-space@v1
      if: ${{ always() }}
      with:
        clean-threshold: 5000
        clean: cargo clean --target-dir "${CARGO_TARGET_DIR}" || true
    - name: Post Run - Upload integration Result when failed
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}_integration.log
        path: ${{ env.CKB_INTEGRATION_TEST_TMP }}/integration.log
    env:
      SENTRY_DSN: ${{ matrix.SENTRY_DSN }}
      ImageOS: ${{matrix.os}}
      BUILD_BUILDID: ${{ github.run_id }}

  Benchmarks_Test:
    needs: if-simple-tests-enabled
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [Linux, macOS]
    steps:
    - uses: actions/checkout@v2
    - name: Benchmarks_Test
      run: |
        make bench-test
    - uses: doitian/available-space@v1
      if: ${{ always() }}
      with:
        clean-threshold: 5000
        clean: cargo clean --target-dir "${CARGO_TARGET_DIR}" || true

  Linters:
    needs: if-simple-tests-enabled
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [Linux, macOS]
    steps:
    - uses: actions/checkout@v2
    - name: Linters
      run: |
         cargo fmt --version ||  rustup component add rustfmt
         cargo clippy --version ||  rustup component add clippy
         make fmt
         make clippy
         git diff --exit-code Cargo.lock
    - uses: doitian/available-space@v1
      if: ${{ always() }}
      with:
        clean-threshold: 5000
        clean: cargo clean --target-dir "${CARGO_TARGET_DIR}" || true

  Quick_Check:
    needs: if-simple-tests-enabled
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Quick_Check
      run: |
        make check-cargotoml
        make check-whitespaces
        make check-dirty-rpc-doc
        make check-dirty-hashes-toml
        devtools/ci/check-cyclic-dependencies.py
    - uses: doitian/available-space@v1
      if: ${{ always() }}
      with:
        clean-threshold: 5000
        clean: cargo clean --target-dir "${CARGO_TARGET_DIR}" || true

  WASM_build:
    needs: if-simple-tests-enabled
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: WASM build
      run: |
        rustup target add wasm32-unknown-unknown
        make wasm-build-test
    - uses: doitian/available-space@v1
      if: ${{ always() }}
      with:
        clean-threshold: 5000
        clean: cargo clean --target-dir "${CARGO_TARGET_DIR}" || true

  Security_Audit_Licenses:
    needs: if-simple-tests-enabled
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Security Audit & Licenses
      run: |
        cargo deny --version || cargo install cargo-deny --locked
        make security-audit
        make check-crates
        make check-licenses
    - uses: doitian/available-space@v1
      if: ${{ always() }}
      with:
        clean-threshold: 5000
        clean: cargo clean --target-dir "${CARGO_TARGET_DIR}" || true

  ci-success:
    name: ci
    needs:
      - UnitTest
      - Linters
      - Quick_Check
      - Security_Audit_Licenses
      - WASM_build
      - Benchmarks_Test
      - Integration_Test
    if: |
        (contains(github.event_name, 'pull_request') || contains('bors[bot]', github.actor)) && success()
    runs-on: ubuntu-latest
    steps:
      - name: CI succeeded
        run: exit 0
